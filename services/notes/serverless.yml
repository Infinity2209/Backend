service: notes-api
package:
  individually: true
  exclude:
    - node_modules/**
    - test/**
    - mocks/**
    - .gitignore
    - .git/**
    - .env

plugins:
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    tableName: notes
    uploadBucket: notes-app2-uploads
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 
        - "arn:aws:dynamodb:us-east-1:390402548293:table/notes" # Restrict to the specific DynamoDB table
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: 
        - "arn:aws:s3:::notes-app2-uploads/*" # Correctly scoped for your S3 bucket

custom:
  esbuild:
    bundle: true
    minify: true # Enable minification for production
    sourcemap: true
    exclude: ['aws-sdk']

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)} # Ensure this file exists and is correctly referenced