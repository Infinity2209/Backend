service: notes-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev  # Change to 'prod' for production deployment
  region: us-east-1
  environment:
    tableName: notes  # Environment variable for DynamoDB table name
    uploadBucket: keeper-app-uploads  # S3 bucket name
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:390402548293:table/notes"  # Specific ARN for notes table
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::keeper-app-uploads/*"  # S3 bucket resources

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors:
            origin: "*"
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # If you have additional resources like API Gateway configurations, you can include them here
  - ${file(resources/api-gateway-errors.yml)}